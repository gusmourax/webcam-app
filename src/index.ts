import { app, BrowserWindow, screen } from 'electron';
import AutoLaunch from 'auto-launch';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): BrowserWindow => {

    const widthPercentage = 20;
    const heightPercentage = 20;

    const display = screen.getPrimaryDisplay();
    const screenWidth = display.bounds.width;
    const screenHeight = display.bounds.height;

    const width = Number(((screenWidth * widthPercentage) / 100).toFixed());
    const height = Number(((screenHeight * heightPercentage) / 100).toFixed());

    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height,
        width,
        x: screenWidth - width,
        y: screenHeight - (height + 60),
        frame: false,
        alwaysOnTop: true,
        minimizable: false,
        closable: false,
        maximizable: false,
        maxHeight: height,
        maxWidth: width,
        minHeight: height,
        minWidth: width,
        fullscreenable: false,
        resizable: false,
        skipTaskbar: true,
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    return mainWindow;
};

const singleInstanceLock = app.requestSingleInstanceLock();

if (!singleInstanceLock) {
    app.quit();
} else {
    let window: BrowserWindow = null;

    app.on('second-instance', () => {
        if (window) {
            if (window.isMinimized()) window.restore();
            window.focus();
        }
    })

    app.on('ready', () => {
        window = createWindow();
        window.focus();
        const display = screen.getPrimaryDisplay();
        const { height: screenHeight, width: screenWidth } = display.bounds;

        const autoLaunch = new AutoLaunch({
            name: 'Webcam MP',
            path: app.getPath('exe')
        })

        autoLaunch.isEnabled().then((isEnabled) => {
            if (!isEnabled) autoLaunch.enable();
        })

        setInterval(() => {
            if (!window.isAlwaysOnTop()) {
                window.setAlwaysOnTop(true);
                window.restore();
                window.focus();
            }
        }, 10000);

        window.on('close', (event) => {
            event.preventDefault();
        })

        window.on('move', () => {
            const { height, width, x, y } = window.getBounds();

            /** left-top */
            if (y < 0 && x < 0) return window.setPosition(0, 0);
            /** right-top */
            if (y < 0 && (x + width) >= screenWidth) return window.setPosition((screenWidth - width), 0);
            /** right-bottom */
            if ((y + height) >= screenHeight && (x + width) >= screenWidth)
                return window.setPosition((screenWidth - width), (screenHeight - height))
            /** left-bottom */
            if ((y + height) >= screenHeight && x < 0) return window.setPosition(0, (screenHeight - height));

            /** top */
            if (y < 0) return window.setPosition(x, 0);
            /** left */
            if (x < 0) return window.setPosition(0, y);
            /** bottom */
            if ((y + height) >= screenHeight) return window.setPosition(x, (screenHeight - height));
            /** right */
            if ((x + width) >= screenWidth) return window.setPosition((screenWidth - width), y);
        })
    });
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});